from fastapi import APIRouter, HTTPException, Request
from datetime import datetime
import subprocess
import os
from models.migration_info import MigrationInfo
from models.alert_model import Alert
from utils.migration_util import load_config
import pytz

router = APIRouter()

triggeredMigrations = []
base_log_path = "/home/ubuntu/contMigration_logs"
config = load_config()
timezone = pytz.timezone('Europe/Berlin')

@router.post("/alert")
async def handle_alerts(alert: Alert):
    info = MigrationInfo(
        hostname=alert.hostname, 
        rule=alert.rule, 
        k8s_pod_name=alert.output_fields.k8s_pod_name, 
        container_name=alert.output_fields.container_name,
        migration_type="automated"
    )

    for rule_config in config.config:
        if alert.rule == rule_config.rule and alert.output_fields.k8s_pod_name not in triggeredMigrations:
            if rule_config.action == "migrate":
                info.forensic_analysis = rule_config.forensic_analysis
                info.AI_suggestion = rule_config.AI_suggestion
                return await trigger_migration(info)
            elif rule_config.action == "log":
                handle_log(alert)
                return {"message": "Event logged"}

async def trigger_migration(info: MigrationInfo):
    log_path = f"{base_log_path}/{info.container_name}/{info.k8s_pod_name}"
    os.makedirs(log_path, exist_ok=True)
    with open(f"{log_path}/migration_log.txt", "w") as file:
        if info.migration_type == "automated":
            file.write(f"Migration log of automated container migration of {info.k8s_pod_name}\n")
            file.write(f"Migration is triggered because of falco rule of:\n{info.rule}\nreceived on {info.hostname}\n")
            file.write(f"Migration is triggered at {datetime.now(timezone)}\n\n")
        elif info.migration_type == "manual":
            file.write(f"Migration log of manual container migration of {info.k8s_pod_name}\n")
            file.write(f"Migration is triggered by user\n")
            file.write(f"Migration is triggered at {datetime.now(timezone)}\n\n")
    print(f"Forensic analysis: {info.forensic_analysis}")
    if info.forensic_analysis:
        print("Generating forensic report")
        with open(f"{log_path}/forensic_report.txt", "w") as file:
            file.write(f"Forensic report of {info.migration_type} container migration of {info.k8s_pod_name}\n")
            file.write(f"Migration is triggered at {datetime.now(timezone)}\n\n")

    try:
        if info.forensic_analysis:
            subprocess.Popen(["/home/ubuntu/meierm78/ContMigration-VT1/scripts/migration/single-migration.sh", info.k8s_pod_name, "--forensic-analysis"],  stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        else:
            subprocess.Popen(["/home/ubuntu/meierm78/ContMigration-VT1/scripts/migration/single-migration.sh", info.k8s_pod_name],  stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        return {"message": "Migration task has been started"}

    except subprocess.CalledProcessError as e:
        raise HTTPException(status_code=500, detail=f"Error executing script: {e.stderr}")

def handle_log(info: MigrationInfo):
    log_path = f"{base_log_path}/{info.container_name}/{info.k8s_pod_name}"
    os.makedirs(log_path, exist_ok=True)
    log_file = os.path.join(log_path, "event_log.txt")
    if not os.path.exists(log_file):
        with open(log_file, "w") as file:
            file.write(f"Log of events generated by Falco on {info.k8s_pod_name}\n")
            file.write(f"{datetime.now(timezone)}: Event received. Rule: {info.rule}\n")
    else:
        with open(log_file, "a") as file:
            file.write(f"{datetime.now(timezone)}: Event received. Rule: {info.rule}\n")

@router.post("/migrate")
async def migrate_pod(request: Request):
    body = await request.json()
    print(f"Request body: ", body)

    #Currently source and target are not used because migration is always from cluster1 to cluster2
    source_cluster = body.get("sourceCluster")
    target_cluster = body.get("targetCluster")
    
    pod_name = body.get("podName")
    app_name = body.get("appName")

    generate_forensic_report = body.get("forensicAnalysis")
    #TODO: Implement the logic to generate forensic report and AI suggestions
    generate_AI_suggestion = body.get("AISuggestion")
    info = MigrationInfo(
        k8s_pod_name=pod_name,
        container_name=app_name,
        migration_type="manual",
        forensic_analysis=generate_forensic_report,
        AI_suggestion=generate_AI_suggestion
    )
    return await trigger_migration(info)